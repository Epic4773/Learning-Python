### main.py will be empty

### If you're going to use Replit for this, instead of opening a Python repl template, open a pygame Repl template.

### The following goes into "alien_invasion.py" under an "alien_invasion" folder:
import sys
from time import sleep

import pygame

from settings import Settings
from game_stats import GameStats
from ship import Ship
from bullet import Bullet
from alien import Alien

# Progress: On Chapter 14 and Page 278 as of May 22, 2023

class AlienInvasion:
  """Overall class to manage game assets and behavior."""

  def __init__(self):
    """Initialize the game, and create game resources."""
    pygame.init()
    self.clock = pygame.time.Clock()
    self.settings = Settings()

    self.screen = pygame.display.set_mode(
      (self.settings.screen_width, self.settings.screen_height))
    pygame.display.set_caption("Alien Invasion")

    # Create an instance to store game statistics.
    self.stats = GameStats(self)

    self.ship = Ship(self)
    self.bullets = pygame.sprite.Group()
    self.aliens = pygame.sprite.Group()

    self._create_fleet()

    # Start Alien Invasion in an active state.
    self.game_active = True

  def run_game(self):
    """Start the main loop for the game."""
    while True:
      self._check_events()
      
      if self.game_active:
        self.ship.update()
        self._update_bullets()
        self._update_aliens()
      
      self._update_screen()
      self.clock.tick(60)

  def _check_events(self):
    """Respond to keypresses and mouse events."""
    for event in pygame.event.get():
      if event.type == pygame.QUIT:
        sys.exit()
      elif event.type == pygame.KEYDOWN:
        self._check_keydown_events(event)
      elif event.type == pygame.KEYUP:
        self._check_keyup_events(event)

  def _check_keydown_events(self, event):
    """Respond to keypresses."""
    if event.key == pygame.K_RIGHT:
      self.ship.moving_right = True
    elif event.key == pygame.K_LEFT:
      self.ship.moving_left = True
    elif event.key == pygame.K_q:
      sys.exit()
    elif event.key == pygame.K_SPACE:
      self._fire_bullet()            

  def _check_keyup_events(self, event):
    """Respond to key releases."""
    if event.key == pygame.K_RIGHT:
      self.ship.moving_right = False
    elif event.key == pygame.K_LEFT:
      self.ship.moving_left = False

  def _fire_bullet(self):
    """Create a new bullet and add it to the bullets group."""
    if len(self.bullets) < self.settings.bullets_allowed:
      new_bullet = Bullet(self)
      self.bullets.add(new_bullet)

  def _update_bullets(self):
    """Update position of bullets and get rid of old bullets."""
    # Update bullet positions.
    self.bullets.update()

    # Get rid of bullets that have disappeared.
    for bullet in self.bullets.copy():
      if bullet.rect.bottom <= 0:
        self.bullets.remove(bullet)

    self._check_bullet_alien_collisions()
    

  def _check_bullet_alien_collisions(self):
    """Respond to bullet-alien collisions."""
    # Remove any bullets and aliens that have collided.
    collisions = pygame.sprite.groupcollide(
      self.bullets, self.aliens, True, True)

    if not self.aliens:
      # Destroy existing bullets and create new fleet.
      self.bullets.empty()
      self._create_fleet()
      
  def _ship_hit(self):
    """Respond to the ship being hit by an alien."""
    if self.stats.ships_left > 0:
      # Decrement ships_left.
      self.stats.ships_left -= 1

      # Get rid of any remaining bullets and aliens.
      self.bullets.empty()
      self.aliens.empty()

      # Create a new fleet and center the ship.
      self._create_fleet()
      self.ship.center_ship()

      # Pause.
      sleep(0.5)
    else:
      self.game_active = False
          
  def _update_aliens(self):
    """Update the positions of all aliens in the fleet."""
    """Check if the fleet is at an edge, then update positions."""
    self._check_fleet_edges()
    self.aliens.update()

    # Look for alien-ship collisions.
    if pygame.sprite.spritecollideany(self.ship, self.aliens):
      self._ship_hit()

    # Look for aliens hitting the bottom of the screen.
    self._check_aliens_bottom()

  def _check_aliens_bottom(self):
    """Check if any aliens have reached the bottom of the screen."""
    for alien in self.aliens.sprites():
      if alien.rect.bottom >= self.settings.screen_height:
        # Treat this the same as if the ship got hit.
        self._ship_hit()
        break

  def _create_fleet(self):
    """Create the fleet of aliens."""
    # Create an alien and keep adding aliens until there's no room left.
    # Spacing between aliens is one alien width and one alien height.
    alien = Alien(self)
    alien_width, alien_height = alien.rect.size

    current_x, current_y = alien_width, alien_height
    while current_y < (self.settings.screen_height - 3 * alien_height):
      while current_x < (self.settings.screen_width - 2 * alien_width):
        self._create_alien(current_x, current_y)
        current_x += 2 * alien_width

      # Finished a row; reset x value, and increment y value.
      current_x = alien_width
      current_y += 2 * alien_height

  def _create_alien(self, x_position, y_position):
    """Create an alien and place it in the fleet."""
    new_alien = Alien(self)
    new_alien.x = x_position
    new_alien.rect.x = x_position
    new_alien.rect.y = y_position
    self.aliens.add(new_alien)

  def _check_fleet_edges(self):
    """Respond appropriately if any aliens have reached an edge."""
    for alien in self.aliens.sprites():
      if alien.check_edges():
        self._change_fleet_direction()
        break

  def _change_fleet_direction(self):
    """Drop the entire fleet and change the fleet's direction."""
    for alien in self.aliens.sprites():
      alien.rect.y += self.settings.fleet_drop_speed
    self.settings.fleet_direction *= -1
  
  def _update_screen(self):
    """Update images on the screen, and flip to the new screen."""
    self.screen.fill(self.settings.bg_color)
    for bullet in self.bullets.sprites():
      bullet.draw_bullet()
    self.ship.blitme()
    self.aliens.draw(self.screen)

    pygame.display.flip()
    
if __name__ == '__main__':
  # Make a game instance, and run the game.
  ai = AlienInvasion()
  ai.run_game()

### The following goes into "settings.py" under the "alien_invasion" folder:
class Settings:
  """A class to store all settings for Alien Invasion."""

  def __init__(self):
    """Initialize the game's settings."""
    # Screen settings
    self.screen_width = 1200
    self.screen_height = 800
    self.bg_color = (230, 230, 230)

    # Ship settings
    self.ship_speed = 1.5
    self.ship_limit = 3

    # Bullet settings
    self.bullet_speed = 3
    self.bullet_width = 6
    self.bullet_height = 25
    self.bullet_color = (69, 61, 38)
    self.bullets_allowed = 10

    # Alien settings
    self.alien_speed = 1.0
    self.fleet_drop_speed = 10
    # fleet_direction of 1 represents right; -1 represents left.
    self.fleet_direction = 1

### Make a folder under the "alien_invasion" folder called "images".

### Upload any spaceship and label it "ship.bmp" under the "images" folder.

### The following goes into "ship.py" under the "alien_invasion" folder:
import pygame

class Ship:
  """A class to manage the ship."""

  def __init__(self, ai_game):
    """Initialize the ship and set its starting position."""
    self.screen = ai_game.screen
    self.settings = ai_game.settings
    self.screen_rect = ai_game.screen.get_rect()

    # Load the ship image and get its rect.
    self.image = pygame.image.load('images/ship.bmp')
    self.rect = self.image.get_rect()

    # Start each new ship at the bottom center of the screen.
    self.rect.midbottom = self.screen_rect.midbottom

    # Store a float for the ship's exact horizontal position.
    self.x = float(self.rect.x)

    # Movement flags; start with a ship that's not moving.
    self.moving_right = False
    self.moving_left = False

  def update(self):
    """Update the ship's position based on movement flags."""
    # Update the ship's x value, not the rect.
    if self.moving_right and self.rect.right < self.screen_rect.right:
      self.x += self.settings.ship_speed
    if self.moving_left and self.rect.left > 0:
      self.x -= self.settings.ship_speed
            
    # Update rect object from self.x.
    self.rect.x = self.x

  def center_ship(self):
    """Center the ship on the screen."""
    self.rect.midbottom = self.screen_rect.midbottom
    self.x = float(self.rect.x)

  def blitme(self):
    """Draw the ship at its current location."""
    self.screen.blit(self.image, self.rect)

### The following goes into "bullet.py" under the "alien_invasion" folder:
import pygame
from pygame.sprite import Sprite

class Bullet(Sprite):
	"""A class to manage bullets fired from the ship."""
	def __init__(self, ai_game):
		"""Create a bullet object at the ship's current position."""
		super().__init__()
		self.screen = ai_game.screen
		self.settings = ai_game.settings
		self.color = self.settings.bullet_color
	
		# Create a bullet rect at (0, 0) and then set correct position.
		self.rect = pygame.Rect(0, 0, self.settings.bullet_width,
		self.settings.bullet_height)
		self.rect.midtop = ai_game.ship.rect.midtop
	
		# Store the bullet's position as a float.
		self.y = float(self.rect.y)

	def update(self):
		"""Move the bullet up the screen."""
		# Update the exact position of the bullet.
		self.y -= self.settings.bullet_speed
		# Update the rect position.
		self.rect.y = self.y
		
	def draw_bullet(self):
		"""Draw the bullet to the screen."""
		pygame.draw.rect(self.screen, self.color, self.rect)

### Upload any alien or enemey spaceship and label it "alien.bmp" under the "images" folder.

### The following goes into "alien.py" under the "alien_invasion" folder:
import pygame
from pygame.sprite import Sprite

class Alien(Sprite):
  """A class to represent a single alien in the fleet."""

  def __init__(self, ai_game):
    """Initialize the alien and set its starting position."""
    super().__init__()
    self.screen = ai_game.screen

    # Load the alien image and set its rect attribute.
    self.image = pygame.image.load('images/alien.bmp')
    self.rect = self.image.get_rect()

    # Start each new alien near the top left of the screen.
    self.rect.x = self.rect.width
    self.rect.y = self.rect.height

    # Store the alien's exact horizontal position.
    self.x = float(self.rect.x)

### The following goes into "game_stats.py" under the "alien_invasion" folder:
class GameStats:
  """Track statistics for Alien Invasion."""

  def __init__(self, ai_game):
    """Initialize statistics."""
    self.settings = ai_game.settings
    self.reset_stats

  def reset_stats(self):
    """Initialize statistics that can change during the game."""
    self.ships_left = self.settings.ship_limit

### Run via shell.
