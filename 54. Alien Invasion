### main.py will be empty

### If you're going to use Replit for this, instead of opening a Python repl template, open a pygame Repl template.

### The following goes into "alien_invasion.py" under an "alien_invasion" folder:
import sys

import pygame

from settings import Settings
from ship import Ship
from bullet import Bullet

# Progress: On Chapter 13 and Page 257 as of May 12, 2023

class AlienInvasion:
  """Overall class to manage game assets and behavior."""
  
  def __init__(self):
    """Initialize the game, and create game resources."""
    pygame.init()
    self.settings = Settings()
    
    self.screen = pygame.display.set_mode((0,0), pygame.FULLSCREEN)
    self.settings.screen_width = self.screen.get_rect().width
    self.settings.screen_height = self.screen.get_rect().height
    pygame.display.set_caption("Alien Invasion")
    
    self.ship = Ship(self)
    self.bullets = pygame.sprite.Group()
    
  def run_game(self):
    """Start the main loop for the game."""
    while True:
      self._check_events()
      self.ship.update()
      self._update_bullets()
      self._update_screen()
      self.clock.tick(60)
      
  def _check_events(self):
    """Respond to keypresses and mouse events."""
    for event in pygame.event.get():
      if event.type == pygame.QUIT:
        sys.exit()
      elif event.type == pygame.KEYDOWN:
        self._check_keydown_events(event)
      elif event.type == pygame.KEYUP:
        self._check_keyup_events(events)
        
  def _check_keydown_events(self,event):
    """Respond to keypresses."""
    if event.key == pygame.K_RIGHT:
      self.ship.moving_right = True
    elif event.key == pygame.K_LEFT:
      self.ship.moving_left = True
    elif event.key == pygame.K_q:
      sys.exit()
    elif event.key == pygame.K_SPACE:
      self._fire_bullet()
      
  def _check_keyup_events(self, events):
    """Respond to keypresses."""
    if event.key == pygame.K_RIGHT:
      self.ship.moving_right = False
    elif event.key == pygame.K_LEFT:
      self.ship.moving_left = False
      
  def _fire_bullet(self):
    """Create a new bullet and add it to the bullets group."""
    if len(self.bullets) < self.settings.bullets_allowed:
      new_bullet = Bullet(self)
      self.bullets.add(new_bullet)
      
  def _update_bullets(self):
    """Update position of bullets and get rid of old bullets."""
    # Update bullet positions.
    self.bullets.update()
    
    # Get rid of bullets that have disappeared.
    for bullet in self.bullets.copy():
      if bullet.rect.bottom <= 0:
        self.bullets.remove(bullet)
        
    print(len(self.bullets))
  
  def _update_screen(self):
    """Update images on the screen, and flip to the new screen."""
    self.screen.fill(self.settings.bg_color)
    for bullet in self.bullets.sprites():
      bullet.draw_bullet()
      self.ship.blitme()
      
    pygame.display.flip()
    
if __name__ == '__main__':
  # Make a game instance, and run the game.
  ai = AlienInvasion()
  ai.run_game()

### The following goes into "settings.py" under the "alien_invasion" folder:
class Settings:
  """A class to store all settings for Alien Invasion."""
  def __init__(self):
    """Initialize the game's settings."""
    # Screen settings
    self.screen_width = 120
    self.screen_height = 80
    self.bg_color = (230, 230, 230)
    self.bullets_allowed = 3
    
    # Ship settings
    self.ship_speed = 1.5
    
    # Bullet settings
    self.bullet_speed = 4.0
    self.bullet_width = 6
    self.bullet_height = 30
    self.bullet_color = (69, 61, 38)

### Make a folder under the "alien_invasion" folder called "images".

### Upload any spaceship and label it "ship.bmp" under the "images" folder.

### The following goes into "ship.py" under the "alien_invasion" folder:
import pygame

class Ship:
  """A class to manage the ship."""
  
  def __init__(self, ai_game):
    """Initialize the ship and set its starting position."""
    self.screen = ai_game.screen
    self.settings = ai_game.settings
    self.screen_rect = ai_game.screen.get_rect()
    
    # Load the ship image and get its rect.
    self.image = pygame.image.load('images/ship.bmp')
    self.rect = self.image.get_rect()
    
    # Start each new ship at the bottom center of the screen.
    self.rect.midbottom = self.screen_rect.midbottom

    # Store a float for the ship's exact horizontal position.
    self.x = float(self.rect.x)

    # Movement flag; start with a ship that's not moving.
    self.moving_right = False
    self.moving_left = False
    
  def update(self):
    """Update the ship's position based on the movement flag."""
    # Update the ship's x value, not the rect.
    if self.moving_right and self.rect.right < self.screen_rect.right:
      self.x += self.settings.ship_speed
    if self.moving_left and self.rect.left > 0:
      self.x -= self.settings.ship_speed

    # Update rect object from self.x.
    self.rect.x = self.x
  
  def blitme(self):
    """Draw the ship at its current location."""
    self.screen.blit(self.image, self.rect)

### The following goes into "bullet.py" under the "alien_invasion" folder:
import pygame
from pygame.sprite import Sprite

class Bullet(Sprite):
	"""A class to manage bullets fired from the ship."""
	def __init__(self, ai_game):
		"""Create a bullet object at the ship's current position."""
		super().__init__()
		self.screen = ai_game.screen
		self.settings = ai_game.settings
		self.color = self.settings.bullet_color
	
		# Create a bullet rect at (0, 0) and then set correct position.
		self.rect = pygame.Rect(0, 0, self.settings.bullet_width,
		self.settings.bullet_height)
		self.rect.midtop = ai_game.ship.rect.midtop
	
		# Store the bullet's position as a float.
		self.y = float(self.rect.y)

	def update(self):
		"""Move the bullet up the screen."""
		# Update the exact position of the bullet.
		self.y -= self.settings.bullet_speed
		# Update the rect position.
		self.rect.y = self.y
		
	def draw_bullet(self):
		"""Draw the bullet to the screen."""
		pygame.draw.rect(self.screen, self.color, self.rect)

### Upload any alien or enemey spaceship and labit it "alien.bmp" under the "images" folder.
