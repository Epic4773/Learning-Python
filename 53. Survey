### main.py will be empty

### The following goes into a seperate file named "language_survey.py":
from survey import AnonymousSurvey

# Define a question, and make a survey.
question = "What is a language that you can speak?"
my_survey = AnonymousSurvey(question)

# Show the question, and store responses to the question.
my_survey.show_question()
print("Enter 'q' at any time to quit.\n")
while True:
  response = input("Language:  ")
  if response == 'q':
    break
  my_survey.store_response(response)
    
# Show the survey results.
print("\nThank you to everyone who participated in the survey!")
my_survey.show_results()

### The following goes into a seperate file named "survey.py":
class AnonymousSurvey:
  """Collect anonymous answers to a survey question"""
    
  def __init__(self, question):
    """Store a question, and prepare to store responses."""
    self.question = question
    self.responses = []
        
  def show_question(self):
    """Show the survey question."""
    print(self.question)
        
  def store_response(self, new_response):
    """Store a single response to the survey."""
    self.responses.append(new_response)
        
  def show_results(self):
    """Show all the responses that have been given."""
    print("Survey results:")
    for response in self.responses:
      print(f"- {response}")

### The following goes into a seperate file named "test_survey.py":
import unittest
from survey import AnonymousSurvey

class TestAnonymousSurvey(unittest.TestCase):

  def setUp(self):
    # This will create a survey and a set of responses for use in all test methods.
    question = 'What\s a language that you can speak?'
    self.my_survey = AnonymousSurvey(question)
    self.responses = ['English', 'Spanish', 'Gujarati', 'Russian', 'Mandarin']

  def test_single_response(self):
    # Test that a single response is stored properly.
    self.my_survey.store_response(self.responses[0])
    self.assertIn(self.responses[0], self.my_survey.responses)

  def test_three_responses(self):
    # Test that three individual responses are stored properly.
    for response in self.responses[:2]:
      self.my_survey.store_response(response)
    for response in self.responses[:2]:
      self.assertIn(response, self.my_survey.responses)

if __name__ == '__main__':
  unittest.main()

### Now instead of using the console to run the code, use the shell.
