1) In your own words, describe what the purpose of a class is in python.

A class is like the instructions, or template, for an object. An object will be an instance of that class, and it will have all of the attributes and methods that are spelled out in the class.

2) What is the purpose of the __init__ function inside of a class?

Init is called when we create an object from a class. It determines how the object attributes will be initialized.

3) When should __init__ have parameters other than self?

Init should have parameters for any unique values that we want to assign to attributes when we create an object.

4) Assume there is a class Book. The __init__ function of class Book has two parameters (besides self), name (a string) and page_num (an int), neither of which have default values. Write an example in the space below of how you could create an object from class Book.

my_book = Book(“The Grapes of Wrath”, 464)

5) What are methods? Do methods always return a value?

Methods are functions inside of a class. Methods do NOT always return a value.

6) Assume the Book class from #4 has a method called summarize, and that method has no parameters (aside from self). Write below how you would call the summarize method on the Book object that you created in #4.

my_book.summarize()

7) Assume that the summarize method has no return value–it instead prints out a statement that summarizes a Book object. What, exactly, is printed out, if the following code is executed in python: print(book_object.summarize())?

None (technically, the print statement from summarize will also be printed because we called the summarize method, but ANY method that does not return a value will show the None keyword if you try to print the method call on the object, because there is no value to print).

8) In the space below, write the full method add_pages for class Book that accepts a number of pages (as an int), adds that number of pages to the page_num attribute, and returns the total number of pages of the book.

def add_pages(self, pages):
self.page_num += pages
return self.page_num

9) When does the self keyword need to be used inside of a class? Name all relevant examples.

ALL methods in a class must have the self keyword as their first parameter. Also, ANY time you reference an attribute OR a method of a class within a class, the self keyword needs to come before the attribute or method.

10) What does inheritance mean in the context of python classes?

Inheritance is the mechanism by which a child class will inherit the methods and attributes of a parent class.

11) What is the purpose of the super function?

The super function instructs the __init__ function in a child class to inherit the methods and attributes of a parent class.

12) Novella is a child class of the parent class Book. Novella has all of the same attributes as Book, but it has a unique attribute called Topic which is a String that represents the topic of the Novella. In the space below, properly declare the class Novella and write the full __init__ function for Novella, using the super keyword.

class Novella(Book):
def __init__(self, name, pages, topic): # add a parameter for topic
super().__init__(name, pages) # inherit the name and page attributes
self.topic = topic # assign to topic whatever argument is provided

13) With your Novella class as written above, can you call the summarize method on a Novella object? Explain your answer.

Yes. A child class that has inherited methods from the parent class via the super() function can utilize any method in the parent class.

14) In a child class, how exactly do you overwrite a method from the parent class?

Rewrite the method in the child class with the SAME NAME as in the parent class. The method will be overwritten such that the method in the child class is called instead of the method in the parent class for any object of the child class.
