# The goal of refactoring is to make your program cleaner, more readable, more efficient, and easier to debug and modify. Below is a program called "function".
# Your task is to identify the individual tasks exhibited in the program and to refactor the program into smaller, more readable functions.
# Choose different names other than "function" for all of your functions. It is up to you how you refactor the function, but consider the following rubric which will be used to grade your quiz submission:
# Your program should . . .
# — Be refactored into a minimum of four total separate functions
# — Be refactored such that each refactored function contains one or more separate and discrete tasks of the original function
# — Have readable and sensible function names that match the utility of each function
# — Run without syntax errors
# — Reproduce the exact functionality of the original program (as shown below)
# — Run completely based off of a call to ONE master function that then makes use of your other refactored functions (just like our examples in class)

# Daniel's Answer: https://github.com/Epic4773/Learning-Python/blob/main/50.%20Refactoring%20Function%20(Maximum%20Value)

def function():
  print('This program will tell you the maximum value of three integers.')
  print()

  num_1 = input('Please enter your first number: ')
  num_2 = input('Please enter your second number: ')
  num_3 = input('Please enter your third number: ')
  print()

  if(type(num_1) != int or type(num_2) != int or type(num_3) != int):
    print('One or more of the values you entered is not an integer.')
    print('Please try again and type only integers.')
    return

  if num_1 > num_2 and num_1 > num_3:
    maximum = num_1
  elif num_2 > num_1 and num_2 > num_3:
    maximum = num_2
  else:
    maximum = num_3

  print()
  if(maximum%2 == 0):
    print(f"The max value is the even number {maximum}.")
  else:
    print(f"The max value is the odd number {maximum}.")

function()

# BONUS:  As it stands, the code above in function() will only return a maximum value if there is one unique maximum.
# For example, in the case that we input -2, 6 and 9, the function states that 9 is the maximum and that it is odd.
# However, if we input 3, 11, and 11, the whole function will fail because I have two identical maximum numbers.
# Can you change your code to handle this scenario? Can you state how many times the maximum occurs? Can you make the function state a mode of the 3 numbers?
# Be creative for your solution to this problem!
